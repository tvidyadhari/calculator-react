{"version":3,"sources":["components/Display.js","components/Key.js","utils/keysJSON.js","components/KeyPad.js","utils/evaluateExpression.js","components/Calc.js","index.js"],"names":["Display","props","className","previous","current","Key","specificStyles","operator","value","style","onClick","handleClick","keys","KeyPad","keysJSON","map","key","Stack","this","items","push","item","peek","length","pop","Error","getPrecedence","isOperator","character","test","operators","evaluateExpression","infixExp","postfix","stack","forEach","operand2","operand1","Number","isInteger","toFixed","postfixEvaluation","expression","number","ch","infixToPostfix","join","Calc","state","curExp","prevExp","bind","keyValue","isNumber","isString","setState","prevState","result","err","slice","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.35dfe38b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../styles/Display.css\";\nfunction Display(props) {\n    return (\n        <div className=\"display\">\n            <div className=\"previous\">{props.previous}</div>\n            <div \n                className=\"current\"\n            >{props.current}</div>\n        </div>\n    );\n}\n\nexport default Display;\n","import React from \"react\";\nimport \"../styles/Key.css\";\n\nfunction Key(props) {\n    const specificStyles = {};\n    if (props.operator)\n        specificStyles[\"background\"] = \"rgba(255, 255, 255, 0.125)\";\n    if (props.value === \"＝\") specificStyles[\"background\"] = \"#85ADBF\";\n    if (+props.value === 0) specificStyles[\"gridColumn\"] = \"2\";\n    \n    return (\n        <div\n            className=\"key\"\n            style={specificStyles}\n            onClick={() => props.handleClick(props.value)}\n        >\n            {props.value}\n        </div>\n    );\n}\n\nexport default Key;\n","const keys = [\n    {\n        value: \"C\",\n        operator: true,\n    },\n    {\n        value: \"⌫\",\n        operator: true,\n    },\n    {\n        value: \"%\",\n        operator: true,\n    },\n    {\n        value: \"÷\",\n        operator: true,\n    },\n    {\n        value: \"7\",\n        operator: false,\n    },\n    {\n        value: \"8\",\n        operator: false,\n    },\n    {\n        value: \"9\",\n        operator: false,\n    },\n    {\n        value: \"×\",\n        operator: true,\n    },\n    {\n        value: \"4\",\n        operator: false,\n    },\n    {\n        value: \"5\",\n        operator: false,\n    },\n    {\n        value: \"6\",\n        operator: false,\n    },\n    {\n        value: \"−\",\n        operator: true,\n    },\n    {\n        value: \"1\",\n        operator: false,\n    },\n    {\n        value: \"2\",\n        operator: false,\n    },\n    {\n        value: \"3\",\n        operator: false,\n    },\n    {\n        value: \"+\",\n        operator: true,\n    },\n    {\n        value: \"0\",\n        operator: false,\n    },\n    {\n        value: \".\",\n        operator: false,\n    },\n    {\n        value: \"＝\",\n        operator: true,\n    },\n];\nexport default keys","import React from \"react\";\nimport \"../styles/KeyPad.css\"\nimport Key from \"./Key\";\nimport keysJSON from \"../utils/keysJSON\";\n\nfunction KeyPad(props) {\n    return (\n        <div className=\"key-pad\">\n            {keysJSON.map((key) => {\n                return (\n                    <Key\n                        key={key.value}\n                        value={key.value}\n                        operator={key.operator}\n                        handleClick={props.handleClick}\n                    />\n                );\n            })}\n        </div>\n    );\n}\n\nexport default KeyPad;\n","/*  UTILS */\n/* UTILS */\n\nfunction Stack() {\n    this.items = [];\n    this.push = (item) => this.items.push(item);\n    this.peek = () => this.items[this.items.length - 1];\n    this.pop = () => {\n        if (this.items.length === 0) throw new Error(\"Stack is empty\");\n        return this.items.pop();\n    };\n}\n\nconst getPrecedence = (operator) => {\n    switch (operator) {\n        case \"*\":\n        case \"/\":\n            return 2;\n        case \"+\":\n        case \"-\":\n            return 1;\n        default:\n            return 0;\n    }\n};\n\nconst isOperator = (character) => {\n    return !/[0-9.]/.test(character);\n};\n\nconst operators = {\n    \"×\": \"*\",\n    \"−\": \"-\",\n    \"÷\": \"/\",\n};\n\n\n// infix to postfix: returns postfix exp as an array\nconst infixToPostfix = (expression) => {\n    let postfix = [];\n    let stack = new Stack();\n    let number = \"\";\n    stack.push(\"N\"); // boundary\n    for (let ch of expression) {\n        if (isOperator(ch)) {\n            if (number) {\n                postfix.push(number);\n                number = \"\";\n            }\n            while (\n                stack.peek() !== \"N\" &&\n                getPrecedence(ch) <= getPrecedence(stack.peek())\n            ) {\n                postfix.push(stack.peek());\n                stack.pop();\n            }\n            stack.push(ch);\n        } else {\n            number += ch;\n        }\n    }\n    if (number) postfix.push(number);\n    while (stack.peek() !== \"N\") {\n        postfix.push(stack.peek());\n        stack.pop();\n\t}\n    return postfix;\n};\n\n// postfix evaluation\nconst postfixEvaluation = (postfix) => {\n    let stack = new Stack();\n    postfix.forEach((item) => {\n        if (isOperator(item)) {\n            let operand2 = stack.pop();\n            let operand1 = stack.pop();\n            switch (item) {\n                case \"+\":\n                    stack.push(operand1 + operand2);\n                    break;\n                case \"-\":\n                    stack.push(operand1 - operand2);\n                    break;\n                case \"*\":\n                    stack.push(operand1 * operand2);\n                    break;\n                case \"/\":\n                    stack.push(operand1 / operand2);\n                    break;\n                case \"%\":\n                    stack.push(operand1 % operand2);\n                    break;\n                default:\n                    throw new Error(\"Wrong Operator\");\n            }\n\t\t} else stack.push(+item) \n\t});\n\t\n    return Number.isInteger(stack.peek()) ? stack.peek(): stack.peek().toFixed(1);\n};\n\n// main function\nconst evaluateExpression = (infixExp) => {\n\tlet reformattedInfix = [...infixExp]\n        .map((ch) => (ch in operators)? operators[ch]:ch)\n        .join(\"\");\n    return postfixEvaluation(infixToPostfix(reformattedInfix))+\"\";\n};\n\nexport default evaluateExpression;\n\n","import React, { Component } from \"react\";\nimport \"../styles/Calc.css\";\nimport Display from \"./Display\";\nimport KeyPad from \"./KeyPad\";\nimport evaluateExpression from \"../utils/evaluateExpression\"\n\nclass Calc extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            curExp: \"0\",\n            prevExp: \"\",\n        };\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    isNumber(expression) {\n        return !expression || /^-?\\d+\\.?\\d*$/.test(expression);\n    }\n\n    isString(expression) {\n        return /[a-zA-Z]+/.test(expression);\n    }\n\n    handleClick(keyValue) {\n        // invalid checks\n        const curExp = this.state.curExp;\n        if (curExp === \"\" && !this.isNumber(this.state.curExp)) return;\n\n        if (\n            curExp &&\n            (this.isString(this.state.curExp) ||\n            !this.isNumber(curExp[curExp.length - 1])) &&\n            !this.isNumber(keyValue) && keyValue !==\"C\"\n        )\n            return;\n        switch (keyValue) {\n            // equals\n            case \"＝\": {\n                // replace spl chars\n                this.setState((prevState) => {\n                    let result;\n                    try {\n                        result = evaluateExpression(prevState.curExp);\n                    } catch (err) {\n                        result = \"Bad Expression\";\n                    }\n                    return {\n                        curExp: result + \"\",\n                        prevExp: prevState.curExp + \"\",\n                    };\n                });\n                break;\n            }\n            // clear screen\n            case \"C\": {\n                this.setState({ curExp: \"0\", prevExp: \"\" });\n                break;\n            }\n            // backspace\n            case \"⌫\": {\n                this.setState((prevState) => ({\n                    curExp: prevState.curExp.slice(0, -1),\n                }));\n                break;\n            }\n            // append\n            default: {\n                this.setState((prevState) => {\n                    // replace curExp if string\n                    if (\n                        this.isString(prevState.curExp) ||\n                        (prevState.curExp === \"0\" && this.isNumber(keyValue))\n                    )\n                        return { curExp: keyValue };\n                    // else append\n                    return { curExp: prevState.curExp + keyValue };\n                });\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"calc\">\n                <Display\n                    previous={this.state.prevExp}\n                    current={this.state.curExp}\n                />\n                <KeyPad handleClick={this.handleClick} />\n            </div>\n        );\n    }\n}\n\nexport default Calc;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport Calculator from \"./components/Calc\"\n\nReactDOM.render(<Calculator />, document.getElementById(\"root\"))\n"],"sourceRoot":""}